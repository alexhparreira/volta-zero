{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Etapa 1 CRISP - DM: Entendimento do negócio\n",
    "\n",
    "Como primeira etapa do CRISP-DM, vamos entender do que se trata o negócio, e quais os objetivos. \n",
    "\n",
    "Este é um problema de concessão de cartões de crédito, publicado no [Kaggle](https://www.kaggle.com/), uma plataforma que promove desafios de ciência de dados, oferecendo prêmios em dinheiro para os melhores colocados. O link original está [aqui](https://www.kaggle.com/rikdifos/credit-card-approval-prediction).  \n",
    "  \n",
    "Essa é uma base de proponentes de cartão de crédito, nosso objetivo é construir um modelo preditivo para identificar o risco de inadimplência (tipicamente definida pela ocorrência de um atraso maior ou igual a 90 em um horizonte de 12 meses) através de variáveis que podem ser observadas na data da avaliação do crédito (tipicamente quando o cliente solicita o cartão).\n",
    "\n",
    "Atividades do CRISP-DM:\n",
    "\n",
    "- Objetivos do negócio\n",
    "Note que o objetivo aqui é que o modelo sirva o mutuário (o cliente) para que avalie suas próprias decisões, e não a instituição de crédito.\n",
    "- Objetivos da modelagem\n",
    "O objetivo está bem definido: desenvolver o melhor modelo preditivo de modo a auxiliar o mutuário a tomar suas próprias decisões referentes a crédito.\n",
    "  \n",
    "Nessa etapa também se avalia a situação da empresa/segmento/assunto de modo a se entender o tamanho do público, relevância, problemas presentes e todos os detalhes do processo gerador do fenômeno em questão, e portanto dos dados.\n",
    "\n",
    "Também é nessa etapa que se constrói um planejamento do projeto."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Etapa 2 Crisp-DM: Entendimento dos dados\n",
    "A segunda etapa é o entendimento dos dados. Foram fornecidas 15 variáveis mais a variável resposta (em negrito na tabela). O significado de cada uma dessas variáveis se encontra na tabela.\n",
    "\n",
    "#### Dicionário de dados\n",
    "\n",
    "Os dados estão dispostos em uma tabela com uma linha para cada cliente, e uma coluna para cada variável armazenando as características desses clientes. Colocamos uma cópia o dicionário de dados (explicação dessas variáveis) abaixo neste notebook:\n",
    "\n",
    "| Variable Name            | Description                                         | Tipo  |\n",
    "| ------------------------ |:---------------------------------------------------:| -----:|\n",
    "| sexo| M = 'Masculino'; F = 'Feminino' |M/F|\n",
    "| posse_de_veiculo| Y = 'possui'; N = 'não possui' |Y/N|\n",
    "| posse_de_imovel| Y = 'possui'; N = 'não possui' |Y/N|\n",
    "| qtd_filhos| Quantidade de filhos |inteiro|\n",
    "| tipo_renda|Tipo de renda (ex: assaliariado, autônomo etc) | texto |\n",
    "| educacao| Nível de educação (ex: secundário, superior etc) |texto|\n",
    "| estado_civil | Estado civil (ex: solteiro, casado etc)| texto |\n",
    "| tipo_residencia | tipo de residência (ex: casa/apartamento, com os pais etc) | texto |\n",
    "| idade | idade em anos |inteiro|\n",
    "| tempo de emprego | tempo de emprego em anos |inteiro|\n",
    "| possui_celular | Indica se possui celular (1 = sim, 0 = não) |binária|\n",
    "| possui_fone_comercial | Indica se possui telefone comercial (1 = sim, 0 = não) |binária|\n",
    "| possui_fone | Indica se possui telefone (1 = sim, 0 = não) |binária|\n",
    "| possui_email | Indica se possui e-mail (1 = sim, 0 = não) |binária|\n",
    "| qt_pessoas_residencia | quantidade de pessoas na residência |inteiro|\n",
    "| **mau** | indicadora de mau pagador (True = mau, False = bom) |binária|\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Carregando os pacotes\n",
    "É considerado uma boa prática carregar os pacotes que serão utilizados como a primeira coisa do programa."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import metrics\n",
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Carregando os dados\n",
    "O comando pd.read_csv é um comando da biblioteca pandas (pd.) e carrega os dados do arquivo csv indicado para um objeto *dataframe* do pandas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Número de linhas e colunas da tabela: (16650, 16)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sexo</th>\n",
       "      <th>posse_de_veiculo</th>\n",
       "      <th>posse_de_imovel</th>\n",
       "      <th>qtd_filhos</th>\n",
       "      <th>tipo_renda</th>\n",
       "      <th>educacao</th>\n",
       "      <th>estado_civil</th>\n",
       "      <th>tipo_residencia</th>\n",
       "      <th>idade</th>\n",
       "      <th>tempo_emprego</th>\n",
       "      <th>possui_celular</th>\n",
       "      <th>possui_fone_comercial</th>\n",
       "      <th>possui_fone</th>\n",
       "      <th>possui_email</th>\n",
       "      <th>qt_pessoas_residencia</th>\n",
       "      <th>mau</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>Working</td>\n",
       "      <td>Secondary / secondary special</td>\n",
       "      <td>Married</td>\n",
       "      <td>House / apartment</td>\n",
       "      <td>58.832877</td>\n",
       "      <td>3.106849</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>Commercial associate</td>\n",
       "      <td>Secondary / secondary special</td>\n",
       "      <td>Single / not married</td>\n",
       "      <td>House / apartment</td>\n",
       "      <td>52.356164</td>\n",
       "      <td>8.358904</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>Commercial associate</td>\n",
       "      <td>Secondary / secondary special</td>\n",
       "      <td>Single / not married</td>\n",
       "      <td>House / apartment</td>\n",
       "      <td>52.356164</td>\n",
       "      <td>8.358904</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>Working</td>\n",
       "      <td>Higher education</td>\n",
       "      <td>Married</td>\n",
       "      <td>House / apartment</td>\n",
       "      <td>46.224658</td>\n",
       "      <td>2.106849</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>Working</td>\n",
       "      <td>Incomplete higher</td>\n",
       "      <td>Married</td>\n",
       "      <td>House / apartment</td>\n",
       "      <td>29.230137</td>\n",
       "      <td>3.021918</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  sexo posse_de_veiculo posse_de_imovel  qtd_filhos            tipo_renda  \\\n",
       "0    M                Y               Y           0               Working   \n",
       "1    F                N               Y           0  Commercial associate   \n",
       "2    F                N               Y           0  Commercial associate   \n",
       "3    M                Y               Y           0               Working   \n",
       "4    F                Y               N           0               Working   \n",
       "\n",
       "                        educacao          estado_civil    tipo_residencia  \\\n",
       "0  Secondary / secondary special               Married  House / apartment   \n",
       "1  Secondary / secondary special  Single / not married  House / apartment   \n",
       "2  Secondary / secondary special  Single / not married  House / apartment   \n",
       "3               Higher education               Married  House / apartment   \n",
       "4              Incomplete higher               Married  House / apartment   \n",
       "\n",
       "       idade  tempo_emprego  possui_celular  possui_fone_comercial  \\\n",
       "0  58.832877       3.106849               1                      0   \n",
       "1  52.356164       8.358904               1                      0   \n",
       "2  52.356164       8.358904               1                      0   \n",
       "3  46.224658       2.106849               1                      1   \n",
       "4  29.230137       3.021918               1                      0   \n",
       "\n",
       "   possui_fone  possui_email  qt_pessoas_residencia    mau  \n",
       "0            0             0                    2.0  False  \n",
       "1            1             1                    1.0  False  \n",
       "2            1             1                    1.0  False  \n",
       "3            1             1                    2.0  False  \n",
       "4            0             0                    2.0  False  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Observe que demo01.csv está na mesma pasta que este notebook\n",
    "# do contrário, seria necessário indicar a pasta no nome do arquivo\n",
    "df = pd.read_csv('demo01.csv')\n",
    "print (\"Número de linhas e colunas da tabela: {}\".format(df.shape))\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Entendimento dos dados - Univariada\n",
    "Nesta etapa tipicamente avaliamos a distribuição de todas as variáveis. Nesta demonstração vamos ver a variável resposta e dois exemplos de univariada apenas. Mas sinta-se à vontade para tentar observar outras variáveis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False    16260\n",
      "True       390\n",
      "Name: mau, dtype: int64\n",
      "\n",
      "Taxa de inadimplentes:\n",
      "0.023423423423423424\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "grafico_barras = df['mau'].value_counts().plot.bar()\n",
    "\n",
    "print(df['mau'].value_counts())\n",
    "print(\"\\nTaxa de inadimplentes:\")\n",
    "print(df['mau'].mean())\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <span style=\"color:blue\">Tarefa </span>\n",
    "<span style=\"color:blue\"> Construa um gráfico de barras para pelo menos duas outras variáveis. \n",
    "**Dica:** Não tente usar as variáveis ```tempo_emprego``` e ```idade``` pois o gráfico de barras dessa forma como construímos não é adequado para elas. </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.clf()\n",
    "var = \"tempo_emprego\"\n",
    "\n",
    "sns.displot(df, x = var, bins = 50)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Working                 8565\n",
      "Commercial associate    3826\n",
      "Pensioner               2800\n",
      "State servant           1451\n",
      "Student                    8\n",
      "Name: tipo_renda, dtype: int64\n",
      "\n",
      "Tipo de Renda:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "grafico_barras2 = df['tipo_renda'].value_counts().plot.bar()\n",
    "\n",
    "print(df['tipo_renda'].value_counts())\n",
    "print(\"\\nTipo de Renda:\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0     11486\n",
      "1      3393\n",
      "2      1552\n",
      "3       189\n",
      "4        24\n",
      "14        2\n",
      "7         2\n",
      "5         2\n",
      "Name: qtd_filhos, dtype: int64\n",
      "\n",
      "Qtde Filhos:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "grafico_barras3 = df['qtd_filhos'].value_counts().plot.bar()\n",
    "\n",
    "print(df['qtd_filhos'].value_counts())\n",
    "print(\"\\nQtde Filhos:\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.clf()\n",
    "var = \"tempo_emprego\"\n",
    "\n",
    "df.loc[df[var]<0,var] = -2\n",
    "\n",
    "sns.displot(df, x = var, bins = 50)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### <span style=\"color:blue\">Tarefa </span>\n",
    "<span style=\"color:blue\"> Construa o histograma da variavel ```dade``` .  </span>\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Entendimento dos dados - Bivariadas\n",
    "\n",
    "Entender a alteração da inadimplência indicada pela variável resposta (```AtrasoRelevante2anos```) e as variáveis explicativas (demais). Para isto, vamos calcular a taxa de inadimplentes (qtd inadimplentes / total) para diferentes grupos definidos pelas variáveis explicativas.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "var = 'idade'\n",
    "cat_srs, bins = pd.qcut(df[var], 4, retbins=True)\n",
    "g = df.groupby(cat_srs)\n",
    "biv = g['idade'].mean()\n",
    "\n",
    "ax = biv.plot.line()\n",
    "ax.set_ylabel(\"Proporção por idade\")\n",
    "ticks = plt.xticks(range(len(biv.index.values)), biv.index.values, rotation = 90)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Etapa 3 Crisp-DM: Preparação dos dados\n",
    "Nessa etapa realizamos tipicamente as seguintes operações com os dados:\n",
    "- seleção\n",
    "Neste caso, os dados já estão pré-selecionados\n",
    "- limpeza\n",
    "Precisaremos identificar e tratar dados faltantes\n",
    "- construção\n",
    "Neste primeiro exercício não faremos construção de novas variáveis\n",
    "- integração\n",
    "Temos apenas uma fonte de dados, não é necessário agregação\n",
    "- formatação\n",
    "Os dados já se encontram em formatos úteis\n",
    "\n",
    "Os dados já estão pré-selecionados, construídos e integrados, mas há dados faltantes que serão eliminados na próxima célula"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tipo</th>\n",
       "      <th>n_categorias</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>sexo</th>\n",
       "      <td>object</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>posse_de_veiculo</th>\n",
       "      <td>object</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>posse_de_imovel</th>\n",
       "      <td>object</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>qtd_filhos</th>\n",
       "      <td>int64</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tipo_renda</th>\n",
       "      <td>object</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>educacao</th>\n",
       "      <td>object</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>estado_civil</th>\n",
       "      <td>object</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tipo_residencia</th>\n",
       "      <td>object</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>idade</th>\n",
       "      <td>float64</td>\n",
       "      <td>5298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tempo_emprego</th>\n",
       "      <td>float64</td>\n",
       "      <td>3005</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>possui_celular</th>\n",
       "      <td>int64</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>possui_fone_comercial</th>\n",
       "      <td>int64</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>possui_fone</th>\n",
       "      <td>int64</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>possui_email</th>\n",
       "      <td>int64</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>qt_pessoas_residencia</th>\n",
       "      <td>float64</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mau</th>\n",
       "      <td>bool</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                          tipo  n_categorias\n",
       "sexo                    object             2\n",
       "posse_de_veiculo        object             2\n",
       "posse_de_imovel         object             2\n",
       "qtd_filhos               int64             8\n",
       "tipo_renda              object             5\n",
       "educacao                object             5\n",
       "estado_civil            object             5\n",
       "tipo_residencia         object             6\n",
       "idade                  float64          5298\n",
       "tempo_emprego          float64          3005\n",
       "possui_celular           int64             1\n",
       "possui_fone_comercial    int64             2\n",
       "possui_fone              int64             2\n",
       "possui_email             int64             2\n",
       "qt_pessoas_residencia  float64             9\n",
       "mau                       bool             2"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "metadata = pd.DataFrame(df.dtypes, columns = ['tipo'])\n",
    "\n",
    "metadata['n_categorias'] = 0\n",
    "\n",
    "for var in metadata.index:\n",
    "    metadata.loc[var,'n_categorias'] = len(df.groupby([var]).size())\n",
    "    \n",
    "metadata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_dummy(df, feature,rank=0):\n",
    "    pos = pd.get_dummies(df[feature], prefix=feature)\n",
    "    mode = df[feature].value_counts().index[rank]\n",
    "    biggest = feature + '_' + str(mode)\n",
    "    pos.drop([biggest],axis=1,inplace=True)\n",
    "    df.drop([feature],axis=1,inplace=True)\n",
    "    df=df.join(pos)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "for var in metadata[metadata['tipo'] == 'object'].index:\n",
    "    df = convert_dummy(df, var)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>qtd_filhos</th>\n",
       "      <th>idade</th>\n",
       "      <th>tempo_emprego</th>\n",
       "      <th>possui_celular</th>\n",
       "      <th>possui_fone_comercial</th>\n",
       "      <th>possui_fone</th>\n",
       "      <th>possui_email</th>\n",
       "      <th>qt_pessoas_residencia</th>\n",
       "      <th>mau</th>\n",
       "      <th>sexo_M</th>\n",
       "      <th>...</th>\n",
       "      <th>educacao_Lower secondary</th>\n",
       "      <th>estado_civil_Civil marriage</th>\n",
       "      <th>estado_civil_Separated</th>\n",
       "      <th>estado_civil_Single / not married</th>\n",
       "      <th>estado_civil_Widow</th>\n",
       "      <th>tipo_residencia_Co-op apartment</th>\n",
       "      <th>tipo_residencia_Municipal apartment</th>\n",
       "      <th>tipo_residencia_Office apartment</th>\n",
       "      <th>tipo_residencia_Rented apartment</th>\n",
       "      <th>tipo_residencia_With parents</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>58.832877</td>\n",
       "      <td>3.106849</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>52.356164</td>\n",
       "      <td>8.358904</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>52.356164</td>\n",
       "      <td>8.358904</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>46.224658</td>\n",
       "      <td>2.106849</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>29.230137</td>\n",
       "      <td>3.021918</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>False</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16645</th>\n",
       "      <td>0</td>\n",
       "      <td>54.109589</td>\n",
       "      <td>9.884932</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16646</th>\n",
       "      <td>0</td>\n",
       "      <td>43.389041</td>\n",
       "      <td>7.380822</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16647</th>\n",
       "      <td>0</td>\n",
       "      <td>30.005479</td>\n",
       "      <td>9.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16648</th>\n",
       "      <td>0</td>\n",
       "      <td>30.005479</td>\n",
       "      <td>9.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16649</th>\n",
       "      <td>0</td>\n",
       "      <td>33.936986</td>\n",
       "      <td>3.630137</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>16650 rows × 29 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       qtd_filhos      idade  tempo_emprego  possui_celular  \\\n",
       "0               0  58.832877       3.106849               1   \n",
       "1               0  52.356164       8.358904               1   \n",
       "2               0  52.356164       8.358904               1   \n",
       "3               0  46.224658       2.106849               1   \n",
       "4               0  29.230137       3.021918               1   \n",
       "...           ...        ...            ...             ...   \n",
       "16645           0  54.109589       9.884932               1   \n",
       "16646           0  43.389041       7.380822               1   \n",
       "16647           0  30.005479       9.800000               1   \n",
       "16648           0  30.005479       9.800000               1   \n",
       "16649           0  33.936986       3.630137               1   \n",
       "\n",
       "       possui_fone_comercial  possui_fone  possui_email  \\\n",
       "0                          0            0             0   \n",
       "1                          0            1             1   \n",
       "2                          0            1             1   \n",
       "3                          1            1             1   \n",
       "4                          0            0             0   \n",
       "...                      ...          ...           ...   \n",
       "16645                      0            0             0   \n",
       "16646                      1            1             0   \n",
       "16647                      1            0             0   \n",
       "16648                      1            0             0   \n",
       "16649                      0            1             1   \n",
       "\n",
       "       qt_pessoas_residencia    mau  sexo_M  ...  educacao_Lower secondary  \\\n",
       "0                        2.0  False       1  ...                         0   \n",
       "1                        1.0  False       0  ...                         0   \n",
       "2                        1.0  False       0  ...                         0   \n",
       "3                        2.0  False       1  ...                         0   \n",
       "4                        2.0  False       0  ...                         0   \n",
       "...                      ...    ...     ...  ...                       ...   \n",
       "16645                    2.0   True       0  ...                         0   \n",
       "16646                    2.0   True       0  ...                         0   \n",
       "16647                    2.0   True       1  ...                         0   \n",
       "16648                    2.0   True       1  ...                         0   \n",
       "16649                    2.0   True       0  ...                         0   \n",
       "\n",
       "       estado_civil_Civil marriage  estado_civil_Separated  \\\n",
       "0                                0                       0   \n",
       "1                                0                       0   \n",
       "2                                0                       0   \n",
       "3                                0                       0   \n",
       "4                                0                       0   \n",
       "...                            ...                     ...   \n",
       "16645                            1                       0   \n",
       "16646                            0                       0   \n",
       "16647                            0                       0   \n",
       "16648                            0                       0   \n",
       "16649                            0                       0   \n",
       "\n",
       "       estado_civil_Single / not married  estado_civil_Widow  \\\n",
       "0                                      0                   0   \n",
       "1                                      1                   0   \n",
       "2                                      1                   0   \n",
       "3                                      0                   0   \n",
       "4                                      0                   0   \n",
       "...                                  ...                 ...   \n",
       "16645                                  0                   0   \n",
       "16646                                  0                   0   \n",
       "16647                                  0                   0   \n",
       "16648                                  0                   0   \n",
       "16649                                  0                   0   \n",
       "\n",
       "       tipo_residencia_Co-op apartment  tipo_residencia_Municipal apartment  \\\n",
       "0                                    0                                    0   \n",
       "1                                    0                                    0   \n",
       "2                                    0                                    0   \n",
       "3                                    0                                    0   \n",
       "4                                    0                                    0   \n",
       "...                                ...                                  ...   \n",
       "16645                                0                                    0   \n",
       "16646                                0                                    0   \n",
       "16647                                0                                    0   \n",
       "16648                                0                                    0   \n",
       "16649                                0                                    0   \n",
       "\n",
       "       tipo_residencia_Office apartment  tipo_residencia_Rented apartment  \\\n",
       "0                                     0                                 0   \n",
       "1                                     0                                 0   \n",
       "2                                     0                                 0   \n",
       "3                                     0                                 0   \n",
       "4                                     0                                 0   \n",
       "...                                 ...                               ...   \n",
       "16645                                 0                                 0   \n",
       "16646                                 0                                 0   \n",
       "16647                                 0                                 0   \n",
       "16648                                 0                                 0   \n",
       "16649                                 0                                 0   \n",
       "\n",
       "       tipo_residencia_With parents  \n",
       "0                                 0  \n",
       "1                                 0  \n",
       "2                                 0  \n",
       "3                                 0  \n",
       "4                                 0  \n",
       "...                             ...  \n",
       "16645                             0  \n",
       "16646                             0  \n",
       "16647                             0  \n",
       "16648                             0  \n",
       "16649                             0  \n",
       "\n",
       "[16650 rows x 29 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Etapa 4 Crisp-DM: Modelagem\n",
    "Nessa etapa que realizaremos a construção do modelo. Os passos típicos são:\n",
    "- Selecionar a técnica de modelagem\n",
    "Utilizaremos a técnica de floresta aleatória (**random forest**), pois é uma técnica bastante versátil e robusta que captura bem padrões complexos nos dados, relativamente fácil de se usar e que costuma produzir excelentes resultados para uma classificação como estas. Vamos ver esse algoritmo em detalhes mais adiante no curso, mas pense nele por enquanto como uma regra complexa baseada nas variáveis explicativas que classifica o indivíduo como inadimplente ou não. Mais adiante no curso vamos extrair mais dessa técnica.\n",
    "- Desenho do teste\n",
    "Antes de rodar o modelo precisamos construir um desenho do teste que será realizado. Para desenvolver um modelo como este, é considerado uma boa prática dividir a base em duas, uma chamada ```treinamento```, onde o algoritmo 'aprende', e outra chamada ```teste```, onde o algoritmo é avaliado. Essa prática fornece uma métrica de avaliação mais fidedigna do algoritmo, falaremos mais detalhes em lições futuras.\n",
    "- Avaliação do modelo\n",
    "Faremos a avaliação do nosso modelo através do percentual de acerto, avaliando a classificação do modelo (inadimplente e não inadimplente) e comparando com o estado real armazenado na variável resposta (```AtrasoRelevante2anos```). Esse percentual de acerto é frequentemente chamado de acurácia (**obs:** nunca usar assertividade... a**ss**ertivo não é aquele que a**c**erta, e sim \"*adj.: em que o locutor declara algo, positivo ou negativo, do qual assume inteiramente a validade; declarativo*.\" a**C**ertivo está errado ;)\n",
    "#### Dividindo a base em treino e teste\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tirando a v. resposta da base de treinamento\n",
    "x = df.drop(\"mau\",axis = 1)\n",
    "y = df[\"mau\"]\n",
    "\n",
    "# Tirando ID da base de treinamento e teste\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>qtd_filhos</th>\n",
       "      <th>idade</th>\n",
       "      <th>tempo_emprego</th>\n",
       "      <th>possui_celular</th>\n",
       "      <th>possui_fone_comercial</th>\n",
       "      <th>possui_fone</th>\n",
       "      <th>possui_email</th>\n",
       "      <th>qt_pessoas_residencia</th>\n",
       "      <th>sexo_M</th>\n",
       "      <th>posse_de_veiculo_Y</th>\n",
       "      <th>...</th>\n",
       "      <th>educacao_Lower secondary</th>\n",
       "      <th>estado_civil_Civil marriage</th>\n",
       "      <th>estado_civil_Separated</th>\n",
       "      <th>estado_civil_Single / not married</th>\n",
       "      <th>estado_civil_Widow</th>\n",
       "      <th>tipo_residencia_Co-op apartment</th>\n",
       "      <th>tipo_residencia_Municipal apartment</th>\n",
       "      <th>tipo_residencia_Office apartment</th>\n",
       "      <th>tipo_residencia_Rented apartment</th>\n",
       "      <th>tipo_residencia_With parents</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>14292</th>\n",
       "      <td>0</td>\n",
       "      <td>44.057534</td>\n",
       "      <td>-1000.665753</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14853</th>\n",
       "      <td>1</td>\n",
       "      <td>25.901370</td>\n",
       "      <td>2.800000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>441</th>\n",
       "      <td>0</td>\n",
       "      <td>45.405479</td>\n",
       "      <td>12.531507</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>336</th>\n",
       "      <td>0</td>\n",
       "      <td>38.679452</td>\n",
       "      <td>8.695890</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16552</th>\n",
       "      <td>0</td>\n",
       "      <td>30.712329</td>\n",
       "      <td>4.723288</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1471</th>\n",
       "      <td>1</td>\n",
       "      <td>44.695890</td>\n",
       "      <td>2.416438</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6335</th>\n",
       "      <td>0</td>\n",
       "      <td>55.167123</td>\n",
       "      <td>4.917808</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14850</th>\n",
       "      <td>2</td>\n",
       "      <td>37.024658</td>\n",
       "      <td>3.717808</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9737</th>\n",
       "      <td>0</td>\n",
       "      <td>28.405479</td>\n",
       "      <td>3.449315</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14822</th>\n",
       "      <td>0</td>\n",
       "      <td>38.586301</td>\n",
       "      <td>7.386301</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>12487 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       qtd_filhos      idade  tempo_emprego  possui_celular  \\\n",
       "14292           0  44.057534   -1000.665753               1   \n",
       "14853           1  25.901370       2.800000               1   \n",
       "441             0  45.405479      12.531507               1   \n",
       "336             0  38.679452       8.695890               1   \n",
       "16552           0  30.712329       4.723288               1   \n",
       "...           ...        ...            ...             ...   \n",
       "1471            1  44.695890       2.416438               1   \n",
       "6335            0  55.167123       4.917808               1   \n",
       "14850           2  37.024658       3.717808               1   \n",
       "9737            0  28.405479       3.449315               1   \n",
       "14822           0  38.586301       7.386301               1   \n",
       "\n",
       "       possui_fone_comercial  possui_fone  possui_email  \\\n",
       "14292                      0            1             0   \n",
       "14853                      1            0             0   \n",
       "441                        0            0             0   \n",
       "336                        0            0             0   \n",
       "16552                      1            0             0   \n",
       "...                      ...          ...           ...   \n",
       "1471                       0            0             0   \n",
       "6335                       0            1             0   \n",
       "14850                      0            1             0   \n",
       "9737                       1            0             0   \n",
       "14822                      1            0             0   \n",
       "\n",
       "       qt_pessoas_residencia  sexo_M  posse_de_veiculo_Y  ...  \\\n",
       "14292                    2.0       1                   0  ...   \n",
       "14853                    3.0       0                   0  ...   \n",
       "441                      2.0       0                   0  ...   \n",
       "336                      1.0       1                   0  ...   \n",
       "16552                    2.0       0                   1  ...   \n",
       "...                      ...     ...                 ...  ...   \n",
       "1471                     2.0       1                   1  ...   \n",
       "6335                     2.0       1                   1  ...   \n",
       "14850                    3.0       1                   1  ...   \n",
       "9737                     2.0       1                   0  ...   \n",
       "14822                    2.0       1                   1  ...   \n",
       "\n",
       "       educacao_Lower secondary  estado_civil_Civil marriage  \\\n",
       "14292                         0                            0   \n",
       "14853                         0                            0   \n",
       "441                           0                            0   \n",
       "336                           0                            0   \n",
       "16552                         0                            0   \n",
       "...                         ...                          ...   \n",
       "1471                          0                            0   \n",
       "6335                          0                            0   \n",
       "14850                         0                            0   \n",
       "9737                          0                            0   \n",
       "14822                         0                            0   \n",
       "\n",
       "       estado_civil_Separated  estado_civil_Single / not married  \\\n",
       "14292                       0                                  0   \n",
       "14853                       0                                  0   \n",
       "441                         0                                  0   \n",
       "336                         1                                  0   \n",
       "16552                       0                                  0   \n",
       "...                       ...                                ...   \n",
       "1471                        1                                  0   \n",
       "6335                        0                                  0   \n",
       "14850                       1                                  0   \n",
       "9737                        0                                  0   \n",
       "14822                       0                                  0   \n",
       "\n",
       "       estado_civil_Widow  tipo_residencia_Co-op apartment  \\\n",
       "14292                   0                                0   \n",
       "14853                   0                                0   \n",
       "441                     0                                0   \n",
       "336                     0                                0   \n",
       "16552                   0                                0   \n",
       "...                   ...                              ...   \n",
       "1471                    0                                0   \n",
       "6335                    0                                0   \n",
       "14850                   0                                0   \n",
       "9737                    0                                0   \n",
       "14822                   0                                0   \n",
       "\n",
       "       tipo_residencia_Municipal apartment  tipo_residencia_Office apartment  \\\n",
       "14292                                    0                                 0   \n",
       "14853                                    0                                 0   \n",
       "441                                      0                                 0   \n",
       "336                                      0                                 0   \n",
       "16552                                    0                                 0   \n",
       "...                                    ...                               ...   \n",
       "1471                                     0                                 0   \n",
       "6335                                     0                                 0   \n",
       "14850                                    0                                 1   \n",
       "9737                                     0                                 0   \n",
       "14822                                    1                                 0   \n",
       "\n",
       "       tipo_residencia_Rented apartment  tipo_residencia_With parents  \n",
       "14292                                 0                             0  \n",
       "14853                                 0                             0  \n",
       "441                                   0                             0  \n",
       "336                                   0                             0  \n",
       "16552                                 0                             0  \n",
       "...                                 ...                           ...  \n",
       "1471                                  0                             0  \n",
       "6335                                  0                             0  \n",
       "14850                                 0                             0  \n",
       "9737                                  0                             0  \n",
       "14822                                 0                             0  \n",
       "\n",
       "[12487 rows x 28 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_train"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Rodando o modelo\n",
    "A função RandomForestClassifier gera a estrutura da floresta aleatória, e o parâmetro ```n_estimator``` define o número de árvores na floresta. Normalmente a acurácia do modelo tende a aumentar com o número de árvores, pelo menos até um certo limite - e aumenta também o recurso computacional demandado. Você pode alterar esse parâmetro e verificar se a acurácia do seu modelo melhora - não recomendamos valores muito altos. Vá alterando aos poucos e percebendo como o tempo aumenta com os seus recursos. Não é necessário ir muito além de umas 100 árvores."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(n_estimators=2)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Treinar uma Random Forest com 5 árvores\n",
    "\n",
    "clf = RandomForestClassifier(n_estimators=2)\n",
    "clf.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Acurácia: 97.19%\n"
     ]
    }
   ],
   "source": [
    "# Calculando a acuracia\n",
    "\n",
    "y_pred = clf.predict(x_test)\n",
    "acc = metrics.accuracy_score(y_test, y_pred)\n",
    "print('Acurácia: {0:.2f}%'.format(acc*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.022119591638308216\n",
      "0.46938775510204084\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>mau</th>\n",
       "      <th>False</th>\n",
       "      <th>True</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>row_0</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>False</th>\n",
       "      <td>4023</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>True</th>\n",
       "      <td>26</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "mau    False  True \n",
       "row_0              \n",
       "False   4023     91\n",
       "True      26     23"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Matriz de confusão\n",
    "\n",
    "tab = pd.crosstab(index = y_pred, columns = y_test)\n",
    "print(tab[1][0]/(tab[1][0] + tab[0][0]))\n",
    "print(tab[1][1]/(tab[1][1] + tab[0][1]))\n",
    "tab"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Etapa 5 Crisp-DM: Avaliação dos resultados\n",
    "A etapa final do CRISP. Neste casp, a nossa avaliação termina com a acurácia. Mas em problemas futuros aprofundaremos mais - a ideia seria avaliar o impacto do uso do modelo no negócio, ou seja, o quanto o resultado financeiro melhora em detrimento da utilização do modelo.\n",
    "\n",
    "Como um exemplo simples, considere que um cliente bom pagador deixa (em média) 5 '*dinheiros*' de lucro, e um mau pagador deixa (em média) 100 '*dinheiros*' de prejuízo.\n",
    "\n",
    "de acordo com a matriz de confusão:\n",
    "\n",
    "| Decisão   | lucro dos bons    | lucro dos maus | total  |\n",
    "| --------- |:-----------------:|:--------------:| ------:|\n",
    "| Aprovador | 4042 x 5          | 72 x (-100)    | 13.010 |\n",
    "| Reprovar  |  27 x 5           | 22 x (-100)    | -2.065 |\n",
    "\n",
    "Estariamos evitando, portanto, um prejuízo de -2.145 '*dinheiros*' - o que na prática significa um aumento no lucro.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Etapa 6 Crisp-DM: Implantação\n",
    "Nessa etapa colocamos em uso o modelo desenvolvido, normalmente implementando o modelo desenvolvido em um motor de crédito que toma as decisões com algum nível de automação - tipicamente aprovando automaticamente clientes muito bons, negando automaticamente clientes muito ruins, e enviando os intermediários para análise manual."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
